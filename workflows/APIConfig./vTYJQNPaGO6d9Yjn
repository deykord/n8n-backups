{
  "active": false,
  "connections": {
    "gpt-4o-mini1": {
      "ai_languageModel": [
        [
          {
            "node": "YouTube Video Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Workflow Variables": {
      "main": [
        [
          {
            "node": "Create YouTube API URL",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get YouTube Transcript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Window Buffer Memory": {
      "ai_memory": [
        [
          {
            "node": "YouTube Video Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Create One JSON Object": {
      "main": [
        [
          {
            "node": "Respond with YouTube Details & Transcript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create YouTube API URL": {
      "main": [
        [
          {
            "node": "Get YouTube Video Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get YouTube Transcript": {
      "main": [
        [
          {
            "node": "Split Out Transcript Segments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "YouTube Processing Tool": {
      "ai_tool": [
        [
          {
            "node": "YouTube Video Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get YouTube Video Details": {
      "main": [
        [
          {
            "node": "Merge YouTube Details & Transcript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "YouTube Video Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Transcript Segments": {
      "main": [
        [
          {
            "node": "Merge YouTube Details & Transcript",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Split Out Transcript Segments": {
      "main": [
        [
          {
            "node": "Combine Transcript Segments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Workflow Variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge YouTube Details & Transcript": {
      "main": [
        [
          {
            "node": "Create One JSON Object",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-03-24T22:56:57.118Z",
  "id": "vTYJQNPaGO6d9Yjn",
  "meta": null,
  "name": "Your Very Own Youtube Agent Straight From Youtube Verse Cracked Youtube Agent",
  "nodes": [
    {
      "parameters": {
        "jsCode": "// Get all input items\nconst items = $input.all();\nconst results = [];\n\n// Import the YoutubeTranscript module from the youtube-transcript package\n// npm i -g youtube-transcript\nconst { YoutubeTranscript } = require('youtube-transcript');\n\nfor (let i = 0; i < items.length; i++) {\n  // Extract the VIDEO_ID from the input JSON\n  const VIDEO_ID = items[i].json.VIDEO_ID;\n  \n  if (!VIDEO_ID) {\n    throw new Error('The video ID parameter is empty.');\n  }\n  \n  try {\n    // Fetch the transcript for the provided video ID\n    const transcript = await YoutubeTranscript.fetchTranscript(VIDEO_ID);\n    \n    // Append the fetched transcript data to the results\n    results.push({\n      json: {\n        youtubeId: VIDEO_ID,\n        transcript,\n      },\n    });\n  } catch (error) {\n    // In case of an error, add an error message to the output for this item\n    results.push({\n      json: {\n        youtubeId: VIDEO_ID,\n        error: error.message,\n      },\n    });\n  }\n}\n\n// Return the results to be used by the next node in the workflow\nreturn results;\n"
      },
      "id": "2a52f5a1-a7de-45fb-a7ef-57267bc88275",
      "name": "Get YouTube Transcript",
      "type": "n8n-nodes-base.code",
      "position": [
        660,
        1320
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "inputSource": "jsonExample",
        "jsonExample": "{\n  \"query\": {\n\t\"videoId\": \"YouTube video id\"\n  }\n}"
      },
      "id": "a6b1fe8c-5f78-45c0-b7ea-187881c8b794",
      "name": "When Executed by Another Workflow",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        60,
        1140
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "393790f9-af52-44d9-bb4e-ae777369caec",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "position": [
        460,
        240
      ],
      "webhookId": "5ed6c28d-2469-4f32-bd16-939f2942a0de",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "content": "## 🤖 AI Agent Chatbot for YouTube Videos",
        "height": 380,
        "width": 580,
        "color": 6
      },
      "id": "66665aa1-7401-4255-b0dd-c23830836b1f",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        680,
        100
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## 🛠️ YouTube Video Processing Tool",
        "height": 280,
        "width": 280
      },
      "id": "3c5f404e-772d-46c5-a736-aa0b1beee387",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        980,
        500
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## OpenAI\nhttps://platform.openai.com/api-keys",
        "height": 280,
        "width": 280,
        "color": 5
      },
      "id": "7e7be15e-80b4-4cca-af6e-420e75c04756",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        380,
        500
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "8b4e43a4-4a7f-43a3-a551-f53944265e71",
      "name": "Window Buffer Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "position": [
        780,
        620
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "content": "## Chat History Memory",
        "height": 280,
        "width": 280,
        "color": 2
      },
      "id": "db8c474e-93b5-4ac2-baca-b568e17c6424",
      "name": "Sticky Note13",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        680,
        500
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {
          "temperature": 0.1
        }
      },
      "id": "81984eeb-33d2-4d92-b87f-00dd1d5f60ac",
      "name": "gpt-4o-mini1",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        480,
        620
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.chatInput }}",
        "options": {
          "systemMessage": "=You are an AI assistant tasked with analyzing and summarizing the transcript of a YouTube video. Your role is to answer user questions and extract relevant insights from the video content. Additionally, identify and extract the **YouTube video ID** from the user's input.\n\nYou have access to a tool called `youtube_video_analyzer`, which can analyze YouTube videos. Use this tool effectively to process video transcripts and generate structured summaries.\n\n#### Instructions:\n1. **Extract YouTube Video ID**:\n   - Identify the **video ID** from the user's input.\n   - Use this ID to analyze the video using the `youtube_video_analyzer` tool.\n\n2. **Analyze and Summarize**:\n   - Break down the video content into main topics using Level 2 headers (##).\n  2.1. Under each header:\n     - List only the most essential concepts and key points\n     - Use bullet points for clarity\n     - Keep explanations concise\n     - Preserve technical accuracy\n     - Highlight key terms in bold\n  2.2. Organize the information in this sequence:\n     - Definition/Background\n     - Main characteristics\n     - Implementation details\n     - Advantages/Disadvantages\n  2.3. Format requirements:\n     - Use markdown formatting\n     - Keep bullet points simple (no nesting)\n     - Bold important terms using **term**\n     - Use tables for comparisons\n     - Include relevant technical details\n\n3. **Organize Output**:\n   - Structure your response in this sequence:\n     1. **Definition/Background**: Provide a brief overview or context of the topic.\n     2. **Main Characteristics**: Highlight critical features or ideas.\n     3. **Implementation Details**: Explain how concepts are applied or executed.\n     4. **Advantages/Disadvantages**: Summarize benefits and limitations.\n\n4. **Formatting Requirements**:\n   - Use markdown formatting for clarity.\n   - Keep bullet points simple (no nested lists).\n   - Use tables for comparisons when applicable.\n   - Include relevant technical details where necessary.\n\nPlease provide a clear, structured summary that captures the core concepts while maintaining technical accuracy.\n\n#### Example Output Structure:\n## Title: Title of video.\n\n## Topic 1: [Main Topic]\n- **Definition/Background**: Brief explanation of the topic.\n- **Main Characteristics**:\n  - Key feature 1\n  - Key feature 2\n- **Implementation Details**:\n  - How it works\n- **Advantages/Disadvantages**:\n  - Advantage 1\n  - Disadvantage 1\n\n## Topic 2: [Next Main Topic]\n...\n\n#### Additional Notes:\n- Ensure your summaries are clear, structured, and technically accurate.\n- If any information is missing or unclear, note it explicitly in your response.\n\nCurrent date: {{ $now }}\n\n\n\n\n \n"
        }
      },
      "id": "77c2e992-6d04-4613-9b0f-31edf8d0c3fa",
      "name": "YouTube Video Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        840,
        240
      ],
      "typeVersion": 1.7
    },
    {
      "parameters": {
        "content": "## 🛠️YouTube Video Processing Tool",
        "height": 720,
        "width": 1910,
        "color": 7
      },
      "id": "d5cb2c7b-41d2-4e71-b8e4-52083d4b8422",
      "name": "Sticky Note10",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        820
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "// Define the base URL for the YouTube Data API\nconst BASE_URL = 'https://www.googleapis.com/youtube/v3/videos';\n\n// Get the first input item\nconst item = $input.first();\n\n// Extract the videoId and google_api_key from the input JSON\nconst VIDEO_ID = item.json.VIDEO_ID;\nconst GOOGLE_API_KEY = item.json.GOOGLE_API_KEY; // Dynamically retrieve API key\n\nif (!VIDEO_ID) {\n  throw new Error('The video ID parameter is empty.');\n}\n\nif (!GOOGLE_API_KEY) {\n  throw new Error('The Google API Key is missing.');\n}\n\n// Construct the API URL with the video ID and dynamically retrieved API key\nconst youtubeUrl = `${BASE_URL}?part=snippet,contentDetails,status,statistics,player,topicDetails&id=${VIDEO_ID}&key=${GOOGLE_API_KEY}`;\n\n// Return the constructed URL\nreturn [\n  {\n    json: {\n      youtubeUrl: youtubeUrl,\n    },\n  },\n];\n"
      },
      "id": "16dbb43f-7588-40c3-b918-d25c0fd5051c",
      "name": "Create YouTube API URL",
      "type": "n8n-nodes-base.code",
      "position": [
        660,
        980
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "fieldToSplitOut": "transcript",
        "options": {}
      },
      "id": "488e22f8-1d48-4afa-809b-d31706650604",
      "name": "Split Out Transcript Segments",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        860,
        1320
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "text",
              "separateBy": " "
            }
          ]
        },
        "options": {}
      },
      "id": "ca59b8fa-b721-4e57-8ef6-77ef734d6caf",
      "name": "Combine Transcript Segments",
      "type": "n8n-nodes-base.summarize",
      "position": [
        1060,
        1320
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "url": "={{ $json.youtubeUrl }}",
        "options": {}
      },
      "id": "d21bc701-567f-41d5-8b96-ffda79e71069",
      "name": "Get YouTube Video Details",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        860,
        980
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "id": "25be2fdd-f021-4638-ba7d-08aab281ab69",
      "name": "Merge YouTube Details & Transcript",
      "type": "n8n-nodes-base.merge",
      "position": [
        1300,
        1120
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "id": "400cdcb9-2dd1-42ff-8cbe-4a8bd0b21d03",
      "name": "Create One JSON Object",
      "type": "n8n-nodes-base.aggregate",
      "position": [
        1500,
        1120
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "56c5bc98-fdd1-41c0-8da8-bc81a257570d",
              "name": "response",
              "type": "string",
              "value": "={{ $json.data }}"
            }
          ]
        },
        "options": {}
      },
      "id": "586e0f1c-0ad5-4e2f-82f1-6978bb9034a1",
      "name": "Respond with YouTube Details & Transcript",
      "type": "n8n-nodes-base.set",
      "position": [
        1700,
        1120
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e656b8ef-4266-4f50-bd41-703b4bdb04df",
              "name": "GOOGLE_API_KEY",
              "type": "string",
              "value": "[Your-Google-API-Key]"
            },
            {
              "id": "32db428d-a2e2-48a0-92c6-3880e744d140",
              "name": "VIDEO_ID",
              "type": "string",
              "value": "={{ $json.query.videoId }}"
            }
          ]
        },
        "options": {}
      },
      "id": "3aa5787b-4709-4bad-9f89-ac6bbeba6d6f",
      "name": "Workflow Variables",
      "type": "n8n-nodes-base.set",
      "position": [
        300,
        1140
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "content": "## Workflow Variables\nhttps://cloud.google.com/docs/get-started/access-apis\n\n",
        "height": 340,
        "width": 260
      },
      "id": "22b85054-9d51-4c66-b05d-bc2ce5f387c0",
      "name": "Sticky Note12",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        220,
        1020
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## YouTube Video Details\nhttps://developers.google.com/youtube/v3/docs\n",
        "height": 300,
        "width": 500,
        "color": 4
      },
      "id": "d80df402-3e34-443e-b180-25a35a431d9d",
      "name": "Sticky Note14",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        540,
        860
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## YouTube Video Transcript\nhttps://docs.n8n.io/integrations/creating-nodes/test/run-node-locally/\nhttps://www.npmjs.com/package/youtube-transcript",
        "height": 300,
        "width": 700,
        "color": 5
      },
      "id": "eca8be91-e73a-465a-9f02-1759908ecda6",
      "name": "Sticky Note15",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        540,
        1200
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## 👍 Try Me!",
        "height": 380,
        "width": 280,
        "color": 4
      },
      "id": "6e38155d-d6ab-4ee7-a2ca-09b05be58c6b",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        380,
        100
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "name": "youtube_video_analyzer",
        "description": "Call this tool to get details and transcript from a YouTube video.  Get the videoId from the users prompt.",
        "workflowId": "={{ $workflow.id }}",
        "specifyInputSchema": true,
        "jsonSchemaExample": "{\n\t\"videoId\": \"YouTube video id\"\n}"
      },
      "id": "23f21318-0fc0-4d73-8468-79f6fc9b4fa4",
      "name": "YouTube Processing Tool",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "position": [
        1080,
        620
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## 📽️ YouTube Video AI Agent Workflow\n\nThis n8n workflow template enables users to interact with an AI agent that extracts details and the transcript of a YouTube video based on a provided video ID. Once the video details and transcript are retrieved, users can chat with the AI agent to explore or analyze the content of the video in a conversational manner.\n\n### How the Workflow Works\n1. **Input Video ID**: The user provides a YouTube video ID as input to the workflow.\n   \n2. **Data Retrieval**: The workflow fetches key details about the video (e.g., title, description, upload date) and retrieves its transcript. This involves using YouTube's Data API and other integrated tools for transcript extraction.\n\n3. **AI Agent Interaction**: The extracted details and transcript are processed by an AI-powered agent. Users can then ask questions or engage in a discussion with the agent regarding the video's content, such as summarizing the transcript, analyzing key points, or clarifying specific sections.\n\n4. **Dynamic Responses**: The AI agent uses natural language processing to provide contextual and accurate responses based on the video data, making the interaction intuitive and user-friendly.\n\n### Use Cases\n- **Content Analysis**: Quickly analyze long YouTube videos by querying specific sections or extracting summaries.\n- **Research and Learning**: Use the AI agent to gain insights from educational videos or tutorials without watching them in full.\n- **Content Creation**: Creators can use this workflow to repurpose transcripts into blogs, social media posts, or other formats.\n- **Accessibility**: Improve accessibility for users who prefer text-based interaction over watching videos.\n\n",
        "height": 780,
        "width": 620,
        "color": 3
      },
      "id": "dd298d02-6c3a-4395-9ffa-da34562829c6",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1280,
        0
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "model": "=deepseek-chat",
        "options": {}
      },
      "id": "0016cf42-1d72-4b7b-9d52-690a4a09dc0d",
      "name": "DeepSeek-V3   Chat",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        140,
        620
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "content": "## 🛠️ Resources for Getting Started\n\n- **Google Cloud Console** (for API setup): Visit Google Cloud's [Get Started Guide](https://cloud.google.com/docs/get-started/access-apis) to configure your API access.\n- **YouTube Data API Key Setup**: Follow this [guide](https://developers.google.com/youtube/v3/docs) to create and manage your YouTube Data API key.\n- **Install n8n Locally**: Refer to this [installation guide](https://docs.n8n.io/integrations/creating-nodes/test/run-node-locally/) for setting up n8n on your local machine.\n\n---\n\n## ✨ Sample Prompt\n*\"Tell me about this YouTube video with id: JWfNLF_g_V0\"*  \n \n*\"Can you provide a list of key takeaways from this video with id: [youtube-video-id]?\"*\n",
        "height": 480,
        "width": 360,
        "color": 3
      },
      "id": "05771cc8-46b7-49bc-8056-b79deb82c7cf",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        0
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## DeepSeek\nhttps://api-docs.deepseek.com/",
        "height": 280,
        "width": 360,
        "color": 6
      },
      "id": "936356ad-3c88-4464-b0d0-550f0335e173",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        500
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## 📽️Ultimate AI-Powered Chatbot for YouTube Summarization & Analysis",
        "height": 80,
        "width": 880,
        "color": 7
      },
      "id": "ac097233-1fde-4d1e-93e6-c190eb5c377c",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        380,
        0
      ],
      "typeVersion": 1
    }
  ],
  "pinData": {
    "When Executed by Another Workflow": [
      {
        "json": {
          "query": {
            "videoId": "JWfNLF_g_V0"
          }
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-03-24T19:11:17.658Z",
      "updatedAt": "2025-03-30T23:13:47.660Z",
      "id": "kMcLyWqZcRl1ToZc",
      "name": "APIConfig."
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-03-24T22:56:57.118Z",
  "versionId": "ba62c415-62e0-4c97-8e71-32783a2755c5"
}