{
  "active": true,
  "connections": {
    "Think": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Handle formatting and split",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram": {
      "main": [
        [],
        [
          {
            "node": "Fallback- No formatting",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Telegram - Embedding Complete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Manual Mapping",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Command Router": {
      "main": [
        [
          {
            "node": "Send processing document message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Unsupported message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Manual Mapping": {
      "main": [
        [
          {
            "node": "Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Command Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Supabase - Save Embeddings",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send embedding Started message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Supabase - Save Embeddings",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Google Gemini": {
      "ai_embedding": [
        [
          {
            "node": "Supabase - Save Embeddings",
            "type": "ai_embedding",
            "index": 0
          },
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Answer questions with a vetor store",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Telegram - Download file": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase - Save Embeddings": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle formatting and split": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store": {
      "ai_vectorStore": [
        [
          {
            "node": "Answer questions with a vetor store",
            "type": "ai_vectorStore",
            "index": 0
          }
        ]
      ]
    },
    "Send processing document message": {
      "main": [
        [
          {
            "node": "Telegram - Download file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram - Embedding Complete": {
      "main": [
        []
      ]
    },
    "Answer questions with a vetor store": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Send embedding Started message": {
      "main": [
        []
      ]
    }
  },
  "createdAt": "2025-05-10T19:25:07.941Z",
  "id": "lJKsCxV0JSHRNbMn",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Document Q&A Chatbot with Gemini AI and Supabase Vector Search for Telegram",
  "nodes": [
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash-preview-04-17",
        "options": {}
      },
      "id": "8cded1ab-04d8-484b-903a-a7a022791e1f",
      "name": "Google Gemini Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "position": [
        -652,
        460
      ],
      "typeVersion": 1,
      "credentials": {
        "googlePalmApi": {
          "id": "NfT134BOD89kq6qA",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.message.text }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a Telegram-based PDF QA Agent integrated via the GPT API. Your role is to help users understand the content of PDF files they upload by answering natural language questions based solely on the PDFs.\n\nUsers interact with you via a Telegram bot. They may send:\n- PDF files (which you will be given access to in pre-processed text form)\n- Text messages (questions or commands like /start)\n\nKey Instructions:\n- Always use the user_knowledge_base tool to answer user questions based on PDF content.\n- Use only the information contained in the uploaded PDF when responding to questions.\n- If a user sends a Telegram command (messages starting with / like /start or /help), infer what they likely intend and respond accordingly.\n- If a user sends a non-PDF file (image, Excel, Word), inform them only PDF uploads are supported.\n- If a user asks “what can you do” or similar, explain that they can upload a PDF and then ask specific questions about its content.\n\nFormatting Rules:\n- Format all responses using Telegram’s HTML style tags, including <b>, <i>, <u>, <s>, <span class=\"tg-spoiler\">, <code>, <pre>, <a href=\"...\">, and <blockquote>.\n- Escape special characters in user-facing text: < becomes &lt;, > becomes &gt;, & becomes &amp;.\n- Keep paragraphs and sections logically structured.\n- Ensure HTML tags are properly nested and closed.\n\nLimit Awareness:\n- Telegram has a 4096-character limit per message. If your reply exceeds this, design your output in breakable chunks (e.g., separate sections or paragraphs).\n"
        }
      },
      "id": "842b9260-6d4e-48b9-87fe-df597312344c",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        -700,
        40
      ],
      "typeVersion": 1.9
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "id": "6f986b43-ac3a-41a4-9470-422b423ae0b0",
      "name": "Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "position": [
        -1520,
        840
      ],
      "webhookId": "d4f286b2-8094-40e3-aeb2-813eb1895ecf",
      "typeVersion": 1.2,
      "credentials": {
        "telegramApi": {
          "id": "i0u3hCZwHwGZwLil",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.chatId }}",
        "text": "={{ $json.text }}",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "id": "18f1e5c2-726a-4c1c-aa38-bc844cc57173",
      "name": "Telegram",
      "type": "n8n-nodes-base.telegram",
      "position": [
        740,
        340
      ],
      "webhookId": "137d8d2f-a941-4803-8646-8932525360c3",
      "typeVersion": 1.2,
      "alwaysOutputData": true,
      "credentials": {
        "telegramApi": {
          "id": "i0u3hCZwHwGZwLil",
          "name": "Telegram account"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {},
      "id": "a80bf57e-250d-49a7-8d93-d1249cb854d1",
      "name": "Think",
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "position": [
        -572,
        260
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "modelName": "models/text-embedding-004"
      },
      "id": "12a520ef-06cc-4bbf-904f-163ed6b603d2",
      "name": "Embeddings Google Gemini",
      "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
      "position": [
        -180,
        720
      ],
      "typeVersion": 1,
      "credentials": {
        "googlePalmApi": {
          "id": "NfT134BOD89kq6qA",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "74613b18-9a7e-4bc9-b311-9ed4b027e6c2",
      "name": "Default Data Loader",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "position": [
        364,
        911.25
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "b57f6ea1-295f-420e-92c7-6602aab3784a",
      "name": "Recursive Character Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "position": [
        452,
        1106.25
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "pdf",
        "binaryPropertyName": "=data",
        "options": {}
      },
      "id": "d38989c3-d665-4849-a0ac-bd9180ffbe22",
      "name": "Extract from File",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [
        200,
        1080
      ],
      "typeVersion": 1,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "tableName": {
          "__rl": true,
          "value": "user_knowledge_base",
          "mode": "list",
          "cachedResultName": "user_knowledge_base"
        },
        "options": {
          "queryName": "match_documents"
        }
      },
      "id": "7ac7ba3e-14e2-4272-a7d2-fd5bb55fae70",
      "name": "Supabase Vector Store",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "position": [
        -452,
        462.5
      ],
      "typeVersion": 1.1,
      "credentials": {
        "supabaseApi": {
          "id": "5n6dkIALa6UGFAdj",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Command Router').item.json.message.chat.id }}",
        "text": "=✅ Document saved!\nFeel free to start asking questions about it.",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "15a151d3-8e33-4269-bd9b-c7329bc99a70",
      "name": "Telegram - Embedding Complete",
      "type": "n8n-nodes-base.telegram",
      "position": [
        940,
        900
      ],
      "webhookId": "4eaead72-f9a7-49a3-95ca-b3bc8f6b9a95",
      "typeVersion": 1.2,
      "credentials": {
        "telegramApi": {
          "id": "i0u3hCZwHwGZwLil",
          "name": "Telegram account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "mode": "list",
          "value": "user_knowledge_base",
          "cachedResultName": "user_knowledge_base"
        },
        "options": {}
      },
      "id": "a456d924-978e-4ac3-8ab1-a8b3c5392082",
      "name": "Supabase - Save Embeddings",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "position": [
        364,
        691.25
      ],
      "typeVersion": 1.1,
      "alwaysOutputData": false,
      "credentials": {
        "supabaseApi": {
          "id": "5n6dkIALa6UGFAdj",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "loose"
                },
                "conditions": [
                  {
                    "id": "895b32db-777d-4d8e-b1d3-596cc9863d09",
                    "operator": {
                      "type": "boolean",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "leftValue": "={{ $json.message.document }}",
                    "rightValue": "={{ $json.message.document }}"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "document"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "loose"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "26c12573-8e00-4832-8410-73d2d739c455",
                    "operator": {
                      "type": "boolean",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "leftValue": "={{ $json.message.text }}",
                    "rightValue": ""
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "text"
            }
          ]
        },
        "looseTypeValidation": true,
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "7bef8620-68ca-44d3-baba-262291837d9b",
      "name": "Command Router",
      "type": "n8n-nodes-base.switch",
      "position": [
        -1260,
        840
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $('Telegram Trigger').item.json.message.document.file_id }}"
      },
      "id": "a1e6a7a0-0ddc-49b2-90c6-2a8c94589f1d",
      "name": "Telegram - Download file",
      "type": "n8n-nodes-base.telegram",
      "position": [
        -76,
        1087.5
      ],
      "webhookId": "11b8f884-34bc-401c-8978-b28507d96e40",
      "typeVersion": 1.2,
      "credentials": {
        "telegramApi": {
          "id": "i0u3hCZwHwGZwLil",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {}
          ]
        },
        "options": {}
      },
      "id": "6f8e647b-0c45-4c3f-bcd7-e1331f764abb",
      "name": "Aggregate",
      "type": "n8n-nodes-base.aggregate",
      "position": [
        740,
        888.75
      ],
      "notesInFlow": true,
      "typeVersion": 1,
      "notes": "This is used to flag the end of progress—no real aggregation."
    },
    {
      "parameters": {
        "chatId": "={{ $('Manual Mapping').item.json.chatId }}",
        "text": "={{ $('Manual Mapping').item.json.text }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "3292f1cd-519a-4084-849a-219bc1cca09f",
      "name": "Fallback- No formatting",
      "type": "n8n-nodes-base.telegram",
      "position": [
        960,
        340
      ],
      "webhookId": "dd2182fe-0b11-4d96-9838-30d60bf8c229",
      "notesInFlow": true,
      "typeVersion": 1.2,
      "credentials": {
        "telegramApi": {
          "id": "i0u3hCZwHwGZwLil",
          "name": "Telegram account"
        }
      },
      "notes": "This is used if, even after HTML formatting,g Telegram wasn't able to process the text, so we send it without formatting."
    },
    {
      "parameters": {
        "fieldToSplitOut": "output",
        "options": {}
      },
      "id": "4c172fed-2fb1-48ff-a454-c03f7f7a5a49",
      "name": "Split Out",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        144,
        340
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import re\nimport html\n\ngemini_output_text = _('AI Agent').first().json.output;\n# Regex to match any HTML tag <...>\nHTML_TAG_PATTERN = re.compile(r'(<[^>]*?>)', re.IGNORECASE)\n\n# List of UNSUPPORTED Telegram HTML tag names\nUNSUPPORTED_TAG_NAMES = [\n    'p', 'li', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'ul', 'ol',\n    'table', 'thead', 'tbody', 'tr', 'td', 'th', 'div', 'br', 'font',\n    'span', # Span is unsupported *unless* it has the specific class\n    'a'     # A is unsupported *unless* it has the href attribute\n    # Add more unsupported tags if you encounter them\n]\n\n# Regex to match unsupported opening or closing tags based on the names list\n# This pattern is simplified and might misinterpret complex attributes\nUNSUPPORTED_TAG_PATTERN = re.compile(r'<\\/?(' + '|'.join(UNSUPPORTED_TAG_NAMES) + r')\\b[^>]*?>', re.IGNORECASE)\n\n# Regex to match a span tag *without* the class=\"tg-spoiler\" attribute\n# This tries to capture the tag and its content to remove both\nUNSUPPORTED_SPAN_FULL_PATTERN = re.compile(r'<span(?! class=\"tg-spoiler\"\\b)[^>]*?>.*?<\\/span>', re.IGNORECASE | re.DOTALL) # DOTALL allows . to match newlines\n\n# Regex to match an a tag *without* an href attribute\n# This tries to capture the tag and its content to remove both\nUNSUPPORTED_A_FULL_PATTERN = re.compile(r'<a(?![^>]*href=)[^>]*?>.*?<\\/a>', re.IGNORECASE | re.DOTALL)\n\n\n# --- Cleaning Function (Regex Only) ---\n\ndef unescape_common_html_entities(text):\n    \"\"\"\n    Unescapes a limited set of common HTML entities in text.\n    Does NOT use html.unescape for maximum compatibility with \"no external library\" rule.\n    \"\"\"\n    # Order matters: &amp; must be replaced first!\n    text = text.replace('&amp;', '&')\n    text = text.replace('&lt;', '<')\n    text = text.replace('&gt;', '>')\n    text = text.replace('&quot;', '\"')\n    text = text.replace('&apos;', \"'\")\n    # Add more common entities here if needed, e.g., text = text.replace('&nbsp;', ' ')\n    return text\n\n\ndef clean_html_regex_only(html_string):\n    \"\"\"\n    Cleans HTML string using regex: removes unsupported tags and escapes text content.\n    Handles &apos; and other basic entities.\n    WARNING: This is a regex-based approach and is NOT as robust as using an HTML parser.\n    It may fail on complex or malformed HTML.\n\n    Args:\n        html_string (str): The input HTML string.\n\n    Returns:\n        str: The cleaned HTML string.\n    \"\"\"\n    # 1. Remove unsupported tags and their content where specific attributes are missing\n    # Process specific full patterns first\n    cleaned_text = UNSUPPORTED_SPAN_FULL_PATTERN.sub('', html_string)\n    cleaned_text = UNSUPPORTED_A_FULL_PATTERN.sub('', cleaned_text)\n\n    # 2. Remove remaining unsupported opening/closing tags, leaving content behind\n    cleaned_text = UNSUPPORTED_TAG_PATTERN.sub('', cleaned_text)\n\n    # 3. Split the remaining string into tags and text segments\n    # This pattern captures the tags themselves so we can differentiate them from text\n    parts = HTML_TAG_PATTERN.split(cleaned_text)\n\n    cleaned_parts = []\n    for part in parts:\n        if not part:\n            continue\n\n        if HTML_TAG_PATTERN.fullmatch(part):\n            # If the part is a tag (matches the full tag pattern)\n            # We assume at this point it's a supported tag due to previous removal steps.\n            # Keep the tag as is.\n            cleaned_parts.append(part)\n        else:\n            # If the part is text content\n            # 1. Unescape common HTML entities (like &apos;) that might be in the text\n            unescaped_text = unescape_common_html_entities(part)\n\n            # 2. Escape the literal characters <, >, & that are *in* the text content\n            # This ensures only the characters themselves are escaped, not entities.\n            # Need to escape & first to avoid issues with '&amp;' if it resulted from unescaping or was original.\n            re_escaped_text = unescaped_text.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')\n\n            cleaned_parts.append(re_escaped_text)\n\n    # Join the processed parts back into a single string\n    return \"\".join(cleaned_parts)\n\n# --- Splitting Logic ---\nSPLIT_PATTERN_REGEX_ONLY = re.compile(r'(<\\/blockquote>|<\\/pre>|\\n\\n|\\s{2,}|(?<=[.!?])\\s+|<[a-z]+[^>]*?>|<\\/[a-z]+>)', flags=re.IGNORECASE)\n\n\ndef split_telegram_message_regex_only(text, max_length=4096):\n    \"\"\"\n    Splits text into multiple messages based on character count and basic patterns.\n    Operates on text already cleaned by clean_html_regex_only.\n    Does NOT guarantee HTML tag integrity across splits due to lack of parsing.\n\n    Args:\n        text (str): The input text (preferably cleaned by clean_html_regex_only).\n        max_length (int): The maximum length for each message part.\n\n    Returns:\n        list: A list of strings, where each string is a message part.\n    \"\"\"\n    if len(text) <= max_length:\n        return [text]\n\n    messages = []\n    current_chunk = \"\"\n\n    # Split by the defined pattern\n    parts = SPLIT_PATTERN_REGEX_ONLY.split(text)\n\n    for part in parts:\n        # Handle parts that are None (can happen with split) or just short whitespace\n        if part is None or (not part.strip() and len(part) < 2 and part != '\\n\\n'):\n             if part is not None and len(part) > 0: # Keep meaningful whitespace splits like \\n\\n\n                  if len(current_chunk) + len(part) <= max_length:\n                       current_chunk += part\n                  else:\n                       # Split happens within meaningful whitespace, finalize chunk\n                       if current_chunk.strip(): # Only add if chunk has content\n                            messages.append(current_chunk.strip())\n                       current_chunk = part # Start new chunk with the whitespace\n             continue # Skip to next part\n\n\n        # Check if adding the current part exceeds the max length\n        if len(current_chunk) + len(part) > max_length:\n            # If the current chunk is empty or only whitespace after stripping,\n            # it means the 'part' itself is too long to fit in a new chunk.\n            if not current_chunk.strip():\n                # Handle very long individual parts (e.g., a huge code block line, a very long word, a single huge tag)\n                # Hard split the long part. WARNING: This can break tags, words, or escape sequences.\n                while len(part) > max_length:\n                    messages.append(part[:max_length])\n                    part = part[max_length:]\n                if part.strip():\n                    current_chunk = part # Remaining part starts a new chunk\n                else:\n                     current_chunk = \"\" # If remainder is just whitespace, clear\n            else:\n                # The current part makes the chunk too long, finalize the current chunk\n                messages.append(current_chunk.strip())\n                # Start a new chunk with the current part\n                current_chunk = part # Keep original part for the new chunk\n\n        else:\n            # Add the current part to the chunk\n            current_chunk += part\n\n    # Add the last chunk\n    if current_chunk.strip(): # Only add if the final chunk has content\n        messages.append(current_chunk.strip())\n\n    # Clean up any empty messages that might have been created\n    messages = [msg for msg in messages if msg.strip()]\n\n    return messages\n  \ncleaned_html_regex = clean_html_regex_only(gemini_output_text)\nmessage_parts_regex = split_telegram_message_regex_only(cleaned_html_regex)\n\nreturn dict({'output': message_parts_regex })"
      },
      "id": "6fb00a65-adf8-4b05-908a-bdefd35a3696",
      "name": "Handle formatting and split",
      "type": "n8n-nodes-base.code",
      "position": [
        -76,
        340
      ],
      "typeVersion": 2,
      "notes": "This is used to prevent Markdown issues in Telegram while sending messages."
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "cdeb5bf1-c91c-44ae-bebd-ab3f4ba2561a",
              "name": "text",
              "type": "string",
              "value": "={{ $json.output }}"
            },
            {
              "id": "7cd7d120-96fa-4539-b343-25bc9b75abb4",
              "name": "chatId",
              "type": "number",
              "value": "={{ $('Command Router').item.json.message.from.id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "70774bdd-9253-4688-be17-55d97c318246",
      "name": "Manual Mapping",
      "type": "n8n-nodes-base.set",
      "position": [
        442,
        340
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "chatId": "={{ $('Command Router').item.json.message.chat.id }}",
        "text": "Unsupported command or file. 😓 Please upload a valid PDF document or ask your question regarding your files.",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "424fe216-1626-41e5-83a9-a2e3fbfa5360",
      "name": "Unsupported message",
      "type": "n8n-nodes-base.telegram",
      "position": [
        -740,
        1420
      ],
      "webhookId": "52f3456a-06ef-4799-b245-0293213dcc4b",
      "typeVersion": 1.2,
      "credentials": {
        "telegramApi": {
          "id": "i0u3hCZwHwGZwLil",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Command Router').item.json.message.chat.id }}",
        "text": "=<b>Processing document...</b>\n<b>Please wait...⏳</b>",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "id": "d2865c73-4865-46cc-b6ac-ec85396acc72",
      "name": "Send processing document message",
      "type": "n8n-nodes-base.telegram",
      "position": [
        -498,
        1087.5
      ],
      "webhookId": "32ade357-f14b-4d10-91f2-02c8aa6e198e",
      "typeVersion": 1.2,
      "credentials": {
        "telegramApi": {
          "id": "i0u3hCZwHwGZwLil",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "name": "user_knowledge_base",
        "description": "=Use this data if the user's question appears to reference an uploaded file, document content, or specific information that might be stored in prior user documents. If not relevant, ignore this source."
      },
      "type": "@n8n/n8n-nodes-langchain.toolVectorStore",
      "typeVersion": 1,
      "position": [
        -452,
        262.5
      ],
      "id": "e3d0202e-ed8d-4614-b3f2-a657b89a0287",
      "name": "Answer questions with a vetor store"
    },
    {
      "parameters": {
        "chatId": "={{ $('Command Router').item.json.message.chat.id }}",
        "text": "=<b>Document processed ✅ </b> \n<b>Num of pages:</b> {{ $json.numpages }}\n<b>Creator:</b> {{ $json.info.Creator }}\n<b>Title:</b> \n<b>Language:</b> {{ $json.info.Language }}",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "id": "82bfa511-502b-4b1e-b1c4-d0e518246bb0",
      "name": "Send embedding Started message",
      "type": "n8n-nodes-base.telegram",
      "position": [
        442,
        1286.25
      ],
      "webhookId": "32ade357-f14b-4d10-91f2-02c8aa6e198e",
      "typeVersion": 1.2,
      "credentials": {
        "telegramApi": {
          "id": "i0u3hCZwHwGZwLil",
          "name": "Telegram account"
        }
      }
    }
  ],
  "pinData": {},
  "repo_name": null,
  "repo_owner": null,
  "repo_path": null,
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-04-28T18:16:58.775Z",
      "updatedAt": "2025-04-28T18:16:58.775Z",
      "id": "5fWvt038qtjyrogG",
      "name": "Ready For Production"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-05-11T19:46:26.000Z",
  "versionId": "d235e9bc-a37d-417c-8cf4-e9f9ab5beb18"
}